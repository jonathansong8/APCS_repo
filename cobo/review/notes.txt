1.
a. sentimentVal( String word )
b. it requires a String. it throws an error if a different type is given as an argument
c. yes, it returns a double

2.
Method call:			Return value:
sentimentVal("happily");	2.32
sentimentVal("terrible");	-3.38
sentimentVal("cold");		-0.04
sentimentVal("zero");		-0.4
sentimentVal("yes");		0.92
sentimentVal("younger");	1.03

3.
a. this would compile; a String is passed into sentimentVal() and a double is returned
b. this would not compile; a double is passed into sentimentVal()
c. this would not compile; two Strings are being passed into sentimentalVal()

4.
totalSentiment begins by creating a sentiment double starting at 0. A String array is created by running split on the String version of a file.	1.03

3.
a. this would compile; a String is passed into sentimentVal() and a double is returned
b. this would not compile; a double is passed into sentimentVal()
c. this would not compile; two Strings are being passed into sentimentalVal()

4.
totalSentiment begins by creating a sentiment double starting at 0. A String array is created by running split on the String version of a file. The array is iterated through, and sentiment is incremented by the sentiment value of the current String in the iteration.

5.
a. the ratings some some sense, as phrases with higher sentiment values have higher ratings. However, short ratings with high praise aren't considered to be of high star rating.
b. a possible way to improve this is to check sentiment value against word count. Another could be to adjust some threshold values to make the starRating more accurate.

6. the student made it so that the final return can only be reached if totalSentiment is above 14. To fix it, he could reverse all the compare signs in the if statements.

Autogenerated reviews:
3. indexOf iterates through the String it's called on to find a target, returning the index of the first occurence. The substring method takes indicies as arguments and returns a substring defined by those indicies. To divide a String into two parts, we can find the index of the first occurence of the pattern we're trying to find, and use substring to partition the String. It's necessary to add 1 to the position of the space when copying the remainder of the String because we don't want the space to be part of our word.

5. calling a static method doesn't require an object of the class to be made, while non-static methods do. non-static methods can interact with instances of a class.
6. fakeReview can check adjectives against the negative and positive lists, and replace the adjectives with a corresponding one from the lists.

Create a positive or negative review:
1. one possible reason to autogenerate a negative review is if a business owner wants to see how they would respond to a negative comment
2. one possible reason to autogenerate a positive review is if someone wants to leave a good review on a service or restaurant but doesn't want to write it themselves.
3. the method needs to determine if an adjective is positive or negative, and replace it accordingly if its bias doesn't match the input.
	* if a word has an asterisk, check if the word is positive or negative.
	* if the word's bias is consistent with the posneg argument, use the current word. otherwise:
	* if posneg argument is positive, use posAdjectives as the working list. otherwise, use negAdjectives as the working list.
	* generate a random key in the working list.
	* append key to output String.
	* if word has no asterisk, append word to output String.

5. the result of the statement is all the characters of oneWord except for the first. This would be "neWord".
6. it's necessary to remove the * from the adjective so that only its base form is checked against the sentiment hashMap.
7. this method could be modified to keep going until the totalSentiment value is greater than a certain high positive threshold.

Open-Ended Activity:
1. we chose to implement this program because this program is very practical for everyday use. If you wanted to clean up data, you would remove any duplicate elements in your list. You can do the same thing with strings by removing duplicate words.
2. We developed our plan on paper. We decided to use the splice method we already have in the folder to separate the String into words. Nested for loops were going to be used to remove duplicates. Removing words that vary in length from Strings is difficult, so we decided to use an ArrayList for this. After the removal, another for loop would be used to convert the ArrayList back into a String to return. We developed our code incrementally, one step at a time described above. After writing the method, we tested it using many different cases. We fixed the remaining formatting errors at the end.
3.
public static String removeDups(String words)
We chose a single parameter  because you only need the data set to remove duplicates. We chose data-type String instead of an ArrayList or String array because we wanted to make the project a bit more challenging. The method we made is static because we are not initializing an instance of the class "Review." An instance/object of the class is necessary to run non-static methods.
4.
noPunc1.equals(noPunc2)
This method call is comparing the content/value of this object, which is String noPunc1, to the object argument, which is String noPunc2. The method returns a boolean value, either true or false.
out.trim()
This method call cuts off all leading and trailing whitespaces to this String, which is String out. The method returns a copy of the String.
5.

6. 
